/// Referencing files so intellisense would work correctly
/// <reference path="_variables.scss" />
/// <reference path="_functions.scss" />

@mixin clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

@mixin breakpointSuffix {
    @include for-mobile-only {
        &--s {
            @content;
        }
    }

    @include for-tablet-down {
        &--m-down {
            @content;
        }
    }

    @include for-tablet-only {
        &--m {
            @content;
        }
    }

    @include for-tablet-up {
        &--m-up {
            @content;
        }
    }

    @include for-desktop-s-down {
        &--l-down {
            @content;
        }
    }

    @include for-desktop-s-only {
        &--l {
            @content;
        }
    }

    @include for-desktop-s-up {
        &--l-up {
            @content;
        }
    }

    @include for-desktop-down {
        &--xl-down {
            @content;
        }
    }


    @include for-desktop-only {
        &--xl {
            @content;
        }
    }

    @include for-desktop-up {
        &--xl-up {
            @content;
        }
    }

    @include for-desktop-l-up {
        &--xxl-up {
            @content;
        }
    }
}
//
// Rounded corners
//
@mixin border-radius-each-padding($top-left: 16px,$top-right: 16px,$bottom-right: 16px,$bottom-left: 16px,$size: 16px) {
    padding: $size $size*1.5;
    border-radius: $top-left $top-right $bottom-right $bottom-left;

    @include for-mobile-only {
        padding: $size;
        border-radius: $top-left $top-right $bottom-right $bottom-left;
    }
}

@mixin border-radius-all-padding($size: 16px) {
    padding: $size $size*1.5;
    border-radius: $size;

    @include for-mobile-only {
        padding: $size;
        border-radius: $size;
    }
}

@mixin border-radius-no-tl($size: 16px) {
    border-radius: 0 $size $size $size;
}

@mixin border-radius-no-tr($size: 16px) {
    border-radius: $size 0 $size $size;
}

@mixin border-radius-no-br($size: 16px) {
    border-radius: $size $size 0 $size;
}

@mixin border-radius-no-bl($size: 16px) {
    border-radius: $size $size $size 0;
}
//
// Shadows
//
@mixin box-shadow($h-offset: 0,$v-offset: 0,$blur: 15px,$spread: 0,$color: rgba($color-secondary,0.15), $border: 0, $border-color: $color-secondary-light-3) {
    box-shadow: $h-offset $v-offset $blur $spread $color;
    -webkit-box-shadow: $h-offset $v-offset $blur $spread $color;
    /* BOX SHADOWS FROM DEFIGNERS ALWAYS HAVE A 1px border*/
    border: $border solid $border-color;
    /*z-index:1;*/
}

@mixin box-shadow-inset($h-offset: 0,$v-offset: 0,$blur: 15px,$spread: 0,$color: rgba($color-secondary,0.15), $border: 0, $border-color: $color-secondary-light-3) {
    box-shadow: inset $h-offset $v-offset $blur $spread $color;
    -webkit-box-shadow: inset $h-offset $v-offset $blur $spread $color;
}
//Mixins for different breakpoints
//usage:
//.rule{
//  @include for-mobile-only{
//      width: 100%;
//      font-size: 15px;
//      }
//  }

/*
    *  
    * SMALL
    *
    */
@mixin for-mobile-only {
    @media (max-width: $breakpoint-tablet*1-1) { //TODO anything under 768px can go to mobile? quick fix for substracting a value in scss
        @content;
    }
}


/*
    *  
    * MEDIUM
    *
    */
@mixin for-tablet-down {
    @media (max-width: $breakpoint-desktop-s*1-1) {
        @content;
    }
}

@mixin for-tablet-only {
    @media (min-width: $breakpoint-tablet) and (max-width: $breakpoint-desktop-s*1-1) {
        @content;
    }
}

@mixin for-tablet-up {
    @media (min-width: $breakpoint-tablet) {
        @content;
    }
}
/*
    *  
    * LARGE
    *
    */
@mixin for-desktop-s-down {
    @media (max-width: $breakpoint-desktop*1-1) {
        @content;
    }
}

@mixin for-desktop-s-only {
    @media (min-width: $breakpoint-desktop-s) and (max-width: $breakpoint-desktop*1-1) {
        @content;
    }
}

@mixin for-desktop-s-up {
    @media (min-width: $breakpoint-desktop-s) {
        @content;
    }
}
/*
    *  
    * XL
    *
    */
@mixin for-desktop-down {
    @media (max-width: $breakpoint-desktop-l*1-1) {
        @content;
    }
}

@mixin for-desktop-only {
    @media (min-width: $breakpoint-desktop) and (max-width: $breakpoint-desktop-l*1-1) {
        @content;
    }
}

@mixin for-desktop-up {
    @media (min-width: $breakpoint-desktop) {
        @content;
    }
}
/*
    *  
    * XXL
    *
    */
@mixin for-desktop-l-up {
    @media (min-width: $breakpoint-desktop-l) {
        @content;
    }
}


//Font family mixin
@mixin ff($font-family: "Open Sans") {
    font-family: $font-family, sans-serif;
}

// ********************************************** //
// *************** TRIANGLE MIXIN *************** //
// ********************************************** //
// Size helper mixin
// ---
// @param [number] $width: width
// @param [number] $height ($width): height
// ---
@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

// [Private]
// Position helper mixin
// Article about it: http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/
// ---
// @param [string] $position: position type
// @param [list] $args: list of offsets and values
// ---
@mixin _position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);

        @if $i and $i + 1 <= length($args) and type-of( nth($args, $i + 1) ) == number {
            #{$o}: nth($args, $i + 1);
        }
    }

    position: $position;
}

// Absolute positioning helper mixin
// Article about it: http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/
// ---
// @param [list] $args: list of offsets and values
// ---
@mixin absolute($args) {
    @include _position(absolute, $args);
}

// Arrow helper mixin
// ---
// @param [string] $direction: arrow direction
// @param [list] $position: list of offsets and values
// @param [color] $color (inherit): arrow color
// @param [number] $size (1em): arrow size
// ---
@mixin triangle($direction, $position, $color: currentColor, $size: 8px) {
    // Make sure the direction is valid
    @if not index(top right bottom left, $direction) {
        @warn "Direction must be one of top, right, bottom or left.";
    }

    @else {
        @include absolute($position); // Position
        @include size(0); // Size
        content: '';
        z-index: 2;
        border-#{$direction}: $size solid $color;
        $perpendicular-borders: $size solid transparent;

        @if $direction == top or $direction == bottom {
            border-left: $perpendicular-borders;
            border-right: $perpendicular-borders;
        }

        @else if $direction == right or $direction == left {
            border-bottom: $perpendicular-borders;
            border-top: $perpendicular-borders;
        }
    }
}
// ********************************************** //
// ********************************************** //
// ********************************************** //

// ********************************************** //
// ***************** INDICATOR *******************//
// ********************************************** //
// USED IN DROPDOWNS
@mixin mixin-dropdown-indicator {
    background-color: $color-secondary-light-2;
    height: 24px;
    width: 24px;
    border-radius: 50%;
    transition: all 0.4s ease;

    &:before {
        content: get-icon("chevron-right-thin","color-secondary");
        position: absolute;
        right: 4px;
        width: 12px;
        height: 12px;
    }
}
// ********************************************** //
// ********************************************** //
// ********************************************** //

// ********************************************** //
// ******************* BURGER ********************//
// ********************************************** //
//DERIVED FROM
/*
Burger by Joren Van Hee, http: //joren.co
MIT License (MIT)
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
// Burger parts
//
// (---) top    -> &::before
// [---] middle -> &
// (---) bottom -> &::after
// Vendor prefixes
$sass-burger-add-vendor-prefixes: true !default;
$burger-height: 3px;
$burger-gutter: 5px;
// Burger
@mixin burger($width: 28px, $color: $color-secondary, $border-radius: 0, $transition-duration: .2s) {
    $height: $burger-height !global;
    $gutter: $burger-gutter !global;
    position: relative;
    margin-top: 22px;
    margin-left: 8px;

    @if $sass-burger-add-vendor-prefixes {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
    }

    user-select: none;
    // 1. Fixes jagged edges in Firefox, see issue #10.
    &, &::before, &::after {
        display: block;
        width: $width;
        height: $height;
        background-color: $color;
        outline: 1px solid transparent; // 1
        @if $border-radius != 0 {
            border-radius: $border-radius;
        }

        @if $sass-burger-add-vendor-prefixes {
            -webkit-transition-property: background-color, -webkit-transform;
            -moz-transition-property: background-color, -moz-transform;
            -o-transition-property: background-color, -o-transform;
        }

        transition-property: background-color, transform;

        @if $sass-burger-add-vendor-prefixes {
            -webkit-transition-duration: $transition-duration;
            -moz-transition-duration: $transition-duration;
            -o-transition-duration: $transition-duration;
        }

        transition-duration: $transition-duration;
    }

    &::before, &::after {
        position: absolute;
        content: "";
    }

    &::before {
        top: -($height + $gutter);
    }

    &::after {
        top: $height + $gutter;
    }
}


// Select parts of the burger
@mixin burger-parts {
    &, &::before, &::after {
        @content;
    }
}

@mixin burger-top {
    &::before {
        @content;
    }
}

@mixin burger-middle {
    & {
        @content;
    }
}

@mixin burger-bottom {
    &::after {
        @content;
    }
}


// Burger animations
@mixin burger-to-cross($color: auto) {
    & {
        background-color: transparent;
    }

    @if ($color != auto) {
        &::before, &::after {
            background-color: $color;
        }
    }

    &::before {
        @if $sass-burger-add-vendor-prefixes {
            -webkit-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
            -moz-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
            -ms-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
            -o-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
        }

        transform: translateY($burger-gutter + $burger-height) rotate(45deg);
    }

    &::after {
        @if $sass-burger-add-vendor-prefixes {
            -webkit-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
            -moz-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
            -ms-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
            -o-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
        }

        transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
    }
}

/************ mixin to change opacity *************/
@mixin fadeBackgroundColor($color, $opacity) {
    background-color: rgba(red($color), green($color), blue($color), $opacity);
}
/************************************************/

/**********************************************************/
/************ WEBP background support *********************/
/* webp/no-webp classes added automatically by modernizr **/
/**********************************************************/
@mixin webp-background($img, $color: transparent, $repeat: no-repeat, $attachment: scroll, $position: center, $size: cover, $type: '.jpg') {
    background: $color url('/content/images/#{$img}.webp') $repeat $attachment $position / $size;

    .no-webp & {
        background-image: url('/content/images/#{$img}#{$type}');
    }
}

@mixin webp-background-pseudo-before($img, $color: transparent, $repeat: no-repeat, $attachment: scroll, $position: center, $size: cover, $type: '.jpg') {
    &::before {
        background: $color url('/content/images/#{$img}.webp') $repeat $attachment $position / $size;
        content: "";
        width: 100%;
        height: 100%;
        display: block;
        position: absolute;
        left: 0;
        top: 0;

        .no-webp & {
            background-image: url('/content/images/#{$img}#{$type}');
        }
    }
}
/*************************************************/
/*************************************************/
/*************************************************/

/**********************************************************/
/************ Background mixin ****************************/
/**********************************************************/
@mixin background-image($img, $repeat: no-repeat, $attachment: scroll, $position: center, $size: cover, $type: '.jpg') {
    background: url('/content/images/#{$img}#{$type}') $repeat $attachment $position / $size;
}
/*************************************************/
/*************************************************/
/*************************************************/
